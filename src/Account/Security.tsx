import React from 'react';
import Layout from '../components/Layout';
import useGlobal from '../useGlobal';
import ImgAvatar from '../assets/becomevendor-features.png';
import Icons from '../components/Icons';  
import './security.scss'  

import { act } from '@testing-library/react';
import SideMenus from '../components/SideMenus';
import SettingMenus from './Menus';

interface SecurityProps {
	uid: string
} 

const Security = ({uid}:SecurityProps) => { 
	const  {account, L, T, Z, getTime, getISOTimeText, fromISOTimeText, fillTimes} = useGlobal();   
	const [sessions, setSessions] = React.useState([
		{
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong",
			"current":true
		},
		{
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong",
			"current":true
		},
		{
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong",
			"current":true
		},
		{
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong",
			"current":true
		}
	]);
	const [accounts, setAccounts] = React.useState([
		{
			"action":"trade release",
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong"
		},
		{
			"action":"trade release",
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
			"location":"hong kong"
		},
		{
			"action":"trade release",
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
        	"location":"hong kong"
		},
		{
			"action":"trade release",
			"date":"a day ago",
			"browser":"Chrome(windows 10)",
			"ip address":"123.44.234.34",
        	"location":"hong kong"
		}
	])
	React.useEffect(()=>{
		/* try {	
			if (!G.inited && !G.loading) {
				G.update({loading:true})
				fetch(getApiUrl('all-tokens')).then(data=>data.json()).then(coins=>{
					if (coins) {
						console.log('coins', coins)
						checkPending()
						G.update({coins, ...G.getPending(), inited:true, loading:false})
					}
				}).catch(reason=>{
					G.update({loading:false, err:reason.message})
				})
			}
		} catch (error) {
			console.log(error)
		} */
	}, [])

	return <Layout>
		{account ? (
			<section>
				<div className="row">
					<div className="col-md-3 mt3">
						<SideMenus activeMenu="security" menus={SettingMenus(L)}/>
					</div> 
					<div className="col-md-9 mt3">  
						<div className="frame security p1">  
							<div className="title h1">Tow-factory authentication (2FA) settings</div>
							<p>Set up your 2FA and make yur account more secure.</p>
							<div className="frame">
								<div className="flex">
									<div className="flex middle">
										<img src={ImgAvatar} style={{width:'100%', maxWidth:50,  borderRadius:'50%'}} alt="bg" />
									</div>
									<div className="fill">
										<div className="justify">
											<div>
												<b>google authenticator or Authy</b><span className="recommend">recommended</span>
												<p className="gray">Random time-bound passcode generated by the app.</p>
											</div>
											<a className="btn-link">Activated</a>
										</div>
									</div> 
								</div>
								<div className="frame">
									<div className="justify">
										<p className="gray">Event name</p>
										<p className="gray">Enable 2FA</p>
									</div>
									<hr/>
									<div className="justify">
										<p>Log in</p>
										<label className="switch">
											<i><input type="checkbox"   /><span className="slider round"></span></i> 
										</label>
									</div> 
									<hr/>
									<div className="justify">
										<p>Sending cryptocurrency</p>
										<label className="switch">
											<i><input type="checkbox"  checked={true} /><span className="slider round"></span></i> 
										</label>
									</div> 
									<hr/>
									<div className="justify">
										<p>Releasing cryptocurrency</p>
										<label className="switch">
											<i><input type="checkbox"   checked={true} /><span className="slider round"></span></i> 
										</label>
									</div> 
								</div> 
								<div className="flex">
									<div className="flex middle">
										<img src={ImgAvatar} style={{width:'100%', maxWidth:50,  borderRadius:'50%'}} alt="bg" />
									</div>
									<div className="fill mt3">
										<div className="justify">
											<div>
												<b>SMS</b> 
												<p className="gray">A unique time-bound code sent via SMS.</p>
											</div>
											<a className="btn-link">Activated now</a>
										</div>
									</div> 
								</div>
							</div>
						</div>
						<div className="frame security p1 mt3">
							<div className="title h1">Active sessions</div> 
							<div className="activetable">
								<div className="act-head">
									<div className="act-col-date">SIGNED IN</div>
									<div className="act-col-browser">BROWSER</div>
									<div className="act-col-address">IP ADDRESS</div>
									<div className="act-col-location">LOCATION</div>
									<div className="act-col-current">CURRENT</div>
									<div className="act-col-close">&times</div>
								</div>  

								{sessions.map((v,k)=>(<div className="act-row" key={k}>
									<div className="act-col-date">{v['date']}</div>
									<div className="act-col-browser">{v['browser']}</div>
									<div className="act-col-address">{v['ip address']}</div>
									<div className="act-col-location">{v['location']}</div>
									<div className="act-col-current">{v['current']===true?'o':'n'}</div>
									<div className="act-col-close">*</div>
								</div>))}
 
							</div> 
							<a className="btn-link">End all sessions except current one</a>
						</div>
							<div className="frame security p1 mt3">
							<div className="title h1">Active sessions</div> 
							<div className="activetable">
								<div className="act-head">
									<div className="act-col-date">ACTION</div>
									<div className="act-col-browser">BROWSER</div>
									<div className="act-col-address">IP ADDRESS</div>
									<div className="act-col-location">LOCATION</div>
									<div className="act-col-current">SIGNED IN</div>
								</div> 
								{accounts.map((v,k)=>(<div className="act-row" key={k}>
									<div className="act-col-date">{v['action']}</div>
									<div className="act-col-browser">{v['browser']}</div>
									<div className="act-col-address">{v['ip address']}</div>
									<div className="act-col-location">{v['location']}</div>
									<div className="act-col-current">{v['date']}</div> 
								</div>))} 
							</div> 
							<a className="btn-link">End all sessions except current one</a>
						</div>
						<div className="frame security p1 mt3">
							<div className="title h1">Closing account</div>  
							<div className="flex">
								<div className="flex middle">
									<img src={ImgAvatar} style={{width:'100%', maxWidth:50,  borderRadius:'50%'}} alt="bg" />
								</div>
								<div className="fill"> 
									<p className="gray">Closing your account will delete all your information on iBitGo such as your past trades, transactions etc. once you submit the request to close your account, you'll receive a confirmation link via email and a moderator will process your request.</p>   
									<a className="btn-link">Close account</a>
								</div> 
							</div>
						</div>
					</div>
				</div>  
			</section>
		) : (
			null
		)}
		
	</Layout>;
};

export default Security;
